// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: session.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id, user_id, refresh_token, user_agent, client_ip, expires_at
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, refresh_token, user_agent, client_ip, expires_at, create_at
`

type CreateSessionParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       int64     `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.ExpiresAt,
		&i.CreateAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions WHERE expires_at < now() - interval '30 days'
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1::uuid AND user_id = $2::bigint
`

type DeleteSessionParams struct {
	ID     uuid.UUID `json:"id"`
	UserID int64     `json:"user_id"`
}

func (q *Queries) DeleteSession(ctx context.Context, arg DeleteSessionParams) error {
	_, err := q.db.Exec(ctx, deleteSession, arg.ID, arg.UserID)
	return err
}

const deleteSessions = `-- name: DeleteSessions :execrows
DELETE FROM sessions
WHERE id = ANY($1::uuid[]) AND user_id = $2::bigint
`

type DeleteSessionsParams struct {
	Ids    []uuid.UUID `json:"ids"`
	UserID int64       `json:"user_id"`
}

func (q *Queries) DeleteSessions(ctx context.Context, arg DeleteSessionsParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteSessions, arg.Ids, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, refresh_token, user_agent, client_ip, expires_at, create_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.ExpiresAt,
		&i.CreateAt,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
WITH Data_CTE AS (
  SELECT id, user_agent, client_ip, expires_at, create_at
  FROM sessions
  WHERE user_id = $9::bigint
),
Count_CTE AS (
  SELECT count(*) total FROM Data_CTE
)
SELECT id, user_agent, client_ip, expires_at, create_at, total FROM Data_CTE
CROSS JOIN Count_CTE
ORDER BY
  CASE WHEN $3::bool THEN client_ip END ASC,
  CASE WHEN $4::bool THEN client_ip END DESC,
  CASE WHEN $5::bool THEN create_at END ASC,
  CASE WHEN $6::bool THEN create_at END DESC,
  CASE WHEN $7::bool THEN expires_at END ASC,
  CASE WHEN $8::bool THEN expires_at END DESC
LIMIT $1
OFFSET $2
`

type ListSessionsParams struct {
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
	ClientIpAsc   bool  `json:"client_ip_asc"`
	ClientIpDesc  bool  `json:"client_ip_desc"`
	CreateAtAsc   bool  `json:"create_at_asc"`
	CreateAtDesc  bool  `json:"create_at_desc"`
	ExpiresAtAsc  bool  `json:"expires_at_asc"`
	ExpiresAtDesc bool  `json:"expires_at_desc"`
	UserID        int64 `json:"user_id"`
}

type ListSessionsRow struct {
	ID        uuid.UUID `json:"id"`
	UserAgent string    `json:"user_agent"`
	ClientIp  string    `json:"client_ip"`
	ExpiresAt time.Time `json:"expires_at"`
	CreateAt  time.Time `json:"create_at"`
	Total     int64     `json:"total"`
}

func (q *Queries) ListSessions(ctx context.Context, arg ListSessionsParams) ([]ListSessionsRow, error) {
	rows, err := q.db.Query(ctx, listSessions,
		arg.Limit,
		arg.Offset,
		arg.ClientIpAsc,
		arg.ClientIpDesc,
		arg.CreateAtAsc,
		arg.CreateAtDesc,
		arg.ExpiresAtAsc,
		arg.ExpiresAtDesc,
		arg.UserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSessionsRow{}
	for rows.Next() {
		var i ListSessionsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserAgent,
			&i.ClientIp,
			&i.ExpiresAt,
			&i.CreateAt,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
