// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: tag.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createPostTags = `-- name: CreatePostTags :many
WITH Tag_CTE AS (
  SELECT id, name FROM tags
  WHERE id = ANY($1::bigint[])
),
Values_CTE AS (
  SELECT p.post_id, tc.id tag_id FROM (
    SELECT id post_id FROM posts WHERE id = $2::bigint
  ) p
  CROSS JOIN Tag_CTE tc
),
Ins_CTE AS (
  INSERT INTO post_tags (post_id, tag_id)
  SELECT post_id, tag_id FROM Values_CTE
  ON CONFLICT (post_id, tag_id) DO NOTHING
)
SELECT id, name FROM Tag_CTE
`

type CreatePostTagsParams struct {
	TagIds []int64 `json:"tag_ids"`
	PostID int64   `json:"post_id"`
}

type CreatePostTagsRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreatePostTags(ctx context.Context, arg CreatePostTagsParams) ([]CreatePostTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, createPostTags, pq.Array(arg.TagIds), arg.PostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CreatePostTagsRow{}
	for rows.Next() {
		var i CreatePostTagsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (name) VALUES ($1) RETURNING id, name
`

func (q *Queries) CreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deletePostTags = `-- name: DeletePostTags :exec
DELETE FROM post_tags
WHERE post_id = $1::bigint
  AND tag_id <> ALL($2::bigint[])
`

type DeletePostTagsParams struct {
	PostID int64   `json:"post_id"`
	TagIds []int64 `json:"tag_ids"`
}

func (q *Queries) DeletePostTags(ctx context.Context, arg DeletePostTagsParams) error {
	_, err := q.db.ExecContext(ctx, deletePostTags, arg.PostID, pq.Array(arg.TagIds))
	return err
}

const deleteTags = `-- name: DeleteTags :execrows
DELETE FROM tags WHERE id = ANY($1::bigint[])
`

func (q *Queries) DeleteTags(ctx context.Context, ids []int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteTags, pq.Array(ids))
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getPostTags = `-- name: GetPostTags :many
SELECT id, name FROM tags
WHERE id = ANY(
  SELECT tag_id FROM post_tags
  WHERE post_id = $1
)
`

func (q *Queries) GetPostTags(ctx context.Context, postID int64) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getPostTags, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByNames = `-- name: GetTagsByNames :many
SELECT id, name FROM tags WHERE name = ANY($1::varchar[])
`

func (q *Queries) GetTagsByNames(ctx context.Context, name []string) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByNames, pq.Array(name))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
WITH Data_CTE AS (
  SELECT t.id, t.name, count(pt.post_id) post_count
  FROM tags t
  LEFT JOIN post_tags pt ON pt.tag_id = t.id
  GROUP BY t.id, t.name
),
Count_CTE AS (
  SELECT count(*) AS total FROM Data_CTE
)
SELECT id, name, post_count, total
FROM Data_CTE
CROSS JOIN Count_CTE
ORDER BY
  CASE WHEN $3::bool THEN name END ASC,
  CASE WHEN $4::bool THEN name END DESC,
  CASE WHEN $5::bool THEN post_count END ASC,
  CASE WHEN $6::bool THEN post_count END DESC,
  id ASC
LIMIT $1
OFFSET $2
`

type ListTagsParams struct {
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
	NameAsc       bool  `json:"name_asc"`
	NameDesc      bool  `json:"name_desc"`
	PostCountAsc  bool  `json:"post_count_asc"`
	PostCountDesc bool  `json:"post_count_desc"`
}

type ListTagsRow struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	PostCount int64  `json:"post_count"`
	Total     int64  `json:"total"`
}

func (q *Queries) ListTags(ctx context.Context, arg ListTagsParams) ([]ListTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, listTags,
		arg.Limit,
		arg.Offset,
		arg.NameAsc,
		arg.NameDesc,
		arg.PostCountAsc,
		arg.PostCountDesc,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTagsRow{}
	for rows.Next() {
		var i ListTagsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PostCount,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE tags SET name = $2::varchar
WHERE id = $1 RETURNING id, name
`

type UpdateTagParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, updateTag, arg.ID, arg.Name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
