// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: notification.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createNotification = `-- name: CreateNotification :exec
INSERT INTO notifications (user_id, kind, title, content)
VALUES ($1, $2, $3, $4)
`

type CreateNotificationParams struct {
	UserID  int64  `json:"user_id"`
	Kind    string `json:"kind"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) error {
	_, err := q.db.ExecContext(ctx, createNotification,
		arg.UserID,
		arg.Kind,
		arg.Title,
		arg.Content,
	)
	return err
}

const deleteMessages = `-- name: DeleteMessages :execrows
DELETE FROM notifications
WHERE id = ANY($1::bigint[]) AND kind = 'admin'
`

func (q *Queries) DeleteMessages(ctx context.Context, ids []int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteMessages, pq.Array(ids))
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteNotifications = `-- name: DeleteNotifications :execrows
DELETE FROM notifications
WHERE id = ANY($1::bigint[])
  AND user_id = $2::bigint
  AND kind <> 'admin'
`

type DeleteNotificationsParams struct {
	Ids    []int64 `json:"ids"`
	UserID int64   `json:"user_id"`
}

func (q *Queries) DeleteNotifications(ctx context.Context, arg DeleteNotificationsParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteNotifications, pq.Array(arg.Ids), arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUnreadCount = `-- name: GetUnreadCount :one
SELECT count(*) FROM notifications
WHERE user_id = $1::bigint
  AND unread = true
  AND kind <> 'admin'
`

func (q *Queries) GetUnreadCount(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUnreadCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listMessages = `-- name: ListMessages :many
WITH Data_CTE AS (
  SELECT id, user_id, kind, title, content, unread, create_at
  FROM notifications WHERE kind = 'admin'
),
Count_CTE AS (
  SELECT count(*) total,
    count(*) filter(WHERE unread = true) unread_count
  FROM Data_CTE
)
SELECT dc.id, dc.user_id, dc.kind, dc.title, dc.content, dc.unread, dc.create_at, cc.total, cc.unread_count, u.username, u.email, u.avatar
FROM Data_CTE dc
CROSS JOIN Count_CTE cc
JOIN users u ON u.id = dc.user_id
ORDER BY create_at DESC
LIMIT $1
OFFSET $2
`

type ListMessagesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListMessagesRow struct {
	ID          int64     `json:"id"`
	UserID      int64     `json:"user_id"`
	Kind        string    `json:"kind"`
	Title       string    `json:"title"`
	Content     string    `json:"content"`
	Unread      bool      `json:"unread"`
	CreateAt    time.Time `json:"create_at"`
	Total       int64     `json:"total"`
	UnreadCount int64     `json:"unread_count"`
	Username    string    `json:"username"`
	Email       string    `json:"email"`
	Avatar      string    `json:"avatar"`
}

func (q *Queries) ListMessages(ctx context.Context, arg ListMessagesParams) ([]ListMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listMessages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMessagesRow{}
	for rows.Next() {
		var i ListMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Kind,
			&i.Title,
			&i.Content,
			&i.Unread,
			&i.CreateAt,
			&i.Total,
			&i.UnreadCount,
			&i.Username,
			&i.Email,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotifications = `-- name: ListNotifications :many
WITH Data_CTE AS (
  SELECT id, kind, title, content, unread, create_at
  FROM notifications
  WHERE user_id = $4::bigint AND kind <> 'admin'
),
Count_CTE AS (
  SELECT count(*) filter(WHERE kind = $3::varchar) total,
    count(*) filter(WHERE unread = true) unread_count,
    count(*) filter(WHERE unread = true AND kind = 'system') system_count,
    count(*) filter(WHERE unread = true AND kind = 'reply') reply_count
  FROM Data_CTE
)
SELECT dc.id, dc.kind, dc.title, dc.content, dc.unread, dc.create_at, cnt.total, cnt.unread_count, cnt.system_count, cnt.reply_count
FROM Data_CTE dc
CROSS JOIN Count_CTE cnt
WHERE kind = $3::varchar
ORDER BY create_at DESC
LIMIT $1
OFFSET $2
`

type ListNotificationsParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Kind   string `json:"kind"`
	UserID int64  `json:"user_id"`
}

type ListNotificationsRow struct {
	ID          int64     `json:"id"`
	Kind        string    `json:"kind"`
	Title       string    `json:"title"`
	Content     string    `json:"content"`
	Unread      bool      `json:"unread"`
	CreateAt    time.Time `json:"create_at"`
	Total       int64     `json:"total"`
	UnreadCount int64     `json:"unread_count"`
	SystemCount int64     `json:"system_count"`
	ReplyCount  int64     `json:"reply_count"`
}

func (q *Queries) ListNotifications(ctx context.Context, arg ListNotificationsParams) ([]ListNotificationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listNotifications,
		arg.Limit,
		arg.Offset,
		arg.Kind,
		arg.UserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListNotificationsRow{}
	for rows.Next() {
		var i ListNotificationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Kind,
			&i.Title,
			&i.Content,
			&i.Unread,
			&i.CreateAt,
			&i.Total,
			&i.UnreadCount,
			&i.SystemCount,
			&i.ReplyCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAllRead = `-- name: MarkAllRead :exec
UPDATE notifications SET unread = false
WHERE user_id = $1::bigint
  AND unread = true
  AND kind <> 'admin'
`

func (q *Queries) MarkAllRead(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, markAllRead, userID)
	return err
}

const markNotifications = `-- name: MarkNotifications :execrows
UPDATE notifications SET unread = $1::bool
WHERE id = ANY($2::bigint[])
`

type MarkNotificationsParams struct {
	Unread bool    `json:"unread"`
	Ids    []int64 `json:"ids"`
}

func (q *Queries) MarkNotifications(ctx context.Context, arg MarkNotificationsParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, markNotifications, arg.Unread, pq.Array(arg.Ids))
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
